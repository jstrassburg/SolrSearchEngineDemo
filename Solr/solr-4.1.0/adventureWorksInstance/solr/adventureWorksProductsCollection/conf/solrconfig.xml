<?xml version="1.0" encoding="UTF-8"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements.  See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to You under the Apache License, Version 2.0
	(the "License"); you may not use this file except in compliance with
	the License.  You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!-- 
	For more details about configurations options that may appear in
	this file, see http://wiki.apache.org/solr/SolrConfigXml. 
-->
<config>
	<!--
		In all configuration below, a prefix of "solr." for class names
		is an alias that causes solr to search appropriate packages,
		including org.apache.solr.(search|update|request|core|analysis)

		You may also specify a fully qualified Java classname if you
		have your own custom plugins.
	-->

	<!--
		Controls what version of Lucene various components of Solr
		adhere to.  Generally, you want to use the latest version to
		get all bug fixes and improvements. It is highly recommended
		that you fully re-index after changing this setting as it can
		affect both how text is indexed and queried.
	-->
	<luceneMatchVersion>LUCENE_41</luceneMatchVersion>

	<!--
		<lib/> directives can be used to instruct Solr to load an Jars
		identified and use them to resolve any "plugins" specified in
		your solrconfig.xml or schema.xml (ie: Analyzers, Request
		Handlers, etc...).

		All directories and paths are resolved relative to the
		instanceDir.

		Please note that <lib/> directives are processed in the order
		that they appear in your solrconfig.xml file, and are "stacked" 
		on top of each other when building a ClassLoader - so if you have 
		plugin jars with dependencies on other jars, the "lower level" 
		dependency jars should be loaded first.

		If a "./lib" directory exists in your instanceDir, all files
		found in it are included as if you had used the following
		syntax...
       
		<lib dir="./lib"/>
	-->

	<!--
		A 'dir' option by itself adds any files found in the directory 
		to the classpath, this is useful for including all jars in a
		directory.

		When a 'regex' is specified in addition to a 'dir', only the
		files in that directory which completely match the regex
		(anchored on both ends) will be included.

		The examples below can be used to load some solr-contribs along 
		with their external dependencies.
	-->
	<lib dir="../../../contrib/extraction/lib" regex=".*\.jar" />
	<lib dir="../../../dist/" regex="solr-cell-\d.*\.jar" />

	<lib dir="../../../contrib/clustering/lib/" regex=".*\.jar" />
	<lib dir="../../../dist/" regex="solr-clustering-\d.*\.jar" />

	<lib dir="../../../dist/" regex="solr-dataimporthandler-\d.*\.jar" />
	<lib dir="../../../contrib/dataimporthandler/lib/" regex=".*\.jar" />

	<lib dir="../../../contrib/langid/lib/" regex=".*\.jar" />
	<lib dir="../../../dist/" regex="solr-langid-\d.*\.jar" />

	<lib dir="../../../contrib/velocity/lib" regex=".*\.jar" />
	<lib dir="../../../dist/" regex="solr-velocity-\d.*\.jar" />

	<!--
		Data Directory

		Used to specify an alternate directory to hold all index data
		other than the default ./data under the Solr home.  If
		replication is in use, this should match the replication
		configuration.
	-->
	<dataDir>${solr.data.dir:}</dataDir>

	<!--
		The DirectoryFactory to use for indexes.

		solr.StandardDirectoryFactory, the default, is filesystem
		based and tries to pick the best implementation for the current
		JVM and platform.  One can force a particular implementation
		via solr.MMapDirectoryFactory, solr.NIOFSDirectoryFactory, or
		solr.SimpleFSDirectoryFactory.

		solr.RAMDirectoryFactory is memory based, not
		persistent, and doesn't work with replication.
	-->
	<directoryFactory name="DirectoryFactory"
		class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

	<!--
		Index Config - These settings control low-level behavior of indexing
	-->
	<indexConfig/>
	
	<!-- JMX: For details see http://wiki.apache.org/solr/SolrJmx -->
	<jmx/>

	<!-- The default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2">
		<!--
			Enables a transaction log, used for real-time get, durability, and
			and solr cloud replica recovery.  The log can grow as big as
			uncommitted changes to the index, so use of a hard autoCommit
			is recommended (see below).
			"dir" - the target directory for transaction logs, defaults to the
			solr data directory.
		-->
		<updateLog>
			<str name="dir">${solr.ulog.dir:}</str>
		</updateLog>

		<!--
			AutoCommit

			Perform a hard commit automatically under certain conditions.
			Instead of enabling autoCommit, consider using "commitWithin"
			when adding documents. 

			http://wiki.apache.org/solr/UpdateXmlMessages

			maxDocs - Maximum number of documents to add since the last
			commit before automatically triggering a new commit.

			maxTime - Maximum amount of time in ms that is allowed to pass
			since a document was added before automaticly
			triggering a new commit. 
			openSearcher - if false, the commit causes recent index changes
			to be flushed to stable storage, but does not cause a new
			searcher to be opened to make those changes visible.

			If the updateLog is enabled, then it's highly recommended to
			have some sort of hard autoCommit to limit the log size.
		-->
		<autoCommit>
			<maxTime>15000</maxTime>
			<openSearcher>false</openSearcher>
		</autoCommit>

	</updateHandler>

	<!-- Query section - these settings control query time things like caches-->
	<query>
		<!--
			Max Boolean Clauses:
			Maximum number of clauses in each BooleanQuery,  an exception
			is thrown if exceeded.

			** WARNING **
			This option actually modifies a global Lucene property that
			will affect all SolrCores.  If multiple solrconfig.xml files
			disagree on this property, the value at any given moment will
			be based on the last SolrCore to be initialized.
		-->
		<maxBooleanClauses>1024</maxBooleanClauses>

		<!--
			Solr Internal Query Caches

			There are two implementations of cache available for Solr,
			LRUCache, based on a synchronized LinkedHashMap, and
			FastLRUCache, based on a ConcurrentHashMap.  

			FastLRUCache has faster gets and slower puts in single
			threaded operation and thus is generally faster than LRUCache
			when the hit ratio of the cache is high (> 75%), and may be
			faster under other scenarios on multi-cpu systems.
		-->

		<!--
			Filter Cache:
			Cache used by SolrIndexSearcher for filters (DocSets),
			unordered sets of *all* documents that match a query.  When a
			new searcher is opened, its caches may be prepopulated or
			"autowarmed" using data from caches in the old searcher.
			autowarmCount is the number of items to prepopulate.  For
			LRUCache, the autowarmed items will be the most recently
			accessed items.

			Parameters:
			class - the SolrCache implementation LRUCache or
				(LRUCache or FastLRUCache)
			size - the maximum number of entries in the cache
			initialSize - the initial capacity (number of entries) of
				the cache.  (see java.util.HashMap)
			autowarmCount - the number of entries to prepopulate from
				and old cache.
		-->
		<filterCache class="solr.FastLRUCache"
			size="512"
			initialSize="512"
			autowarmCount="0"/>

		<!--
			Query Result Cache:
			Caches results of searches - ordered lists of document ids
			(DocList) based on a query, a sort, and the range of documents 
			requested.
		-->
		<queryResultCache class="solr.LRUCache"
			size="512"
			initialSize="512"
			autowarmCount="0"/>

		<!--
			Document Cache:
			Caches Lucene Document objects (the stored fields for each
			document).  Since Lucene internal document ids are transient,
			this cache will not be autowarmed.  
		-->
		<documentCache class="solr.LRUCache"
			size="512"
			initialSize="512"
			autowarmCount="0"/>

		<!--
			Lazy Field Loading:
			If true, stored fields that are not requested will be loaded
			lazily.  This can result in a significant speed improvement
			if the usual case is to not load all stored fields,
			especially if the skipped fields are large compressed text
			fields.
		-->
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!--
			Result Window Size:
			An optimization for use with the queryResultCache.  When a search
			is requested, a superset of the requested number of document ids
			are collected.  For example, if a search for a particular query
			requests matching documents 10 through 19, and queryWindowSize 
			is 50, then documents 0 through 49 will be collected and cached.
			Any further requests in that range can be satisfied via the cache.
		-->
		<queryResultWindowSize>50</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the queryResultCache. -->
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<!--
			Query Related Event Listeners

			Various IndexSearcher related events can trigger Listeners to
			take actions.

			newSearcher - fired whenever a new searcher is being prepared
			and there is a current searcher handling requests (aka
			registered).  It can be used to prime certain caches to
			prevent long request times for certain requests.

			firstSearcher - fired whenever a new searcher is being
			prepared but there is no current registered searcher to handle
			requests or to gain autowarming data from.
		-->

		<!--
			QuerySenderListener takes an array of NamedList and executes a
			local query request for each NamedList in sequence. 
		-->
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<!--
					<lst><str name="q">solr</str><str name="sort">price asc</str></lst>
					<lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
				-->
			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">bike</str>
					<str name="q">bicycle</str>
					<str name="q">helmet</str>
					<str name="q">frame</str>
					<str name="q">wheel</str>
					<str name="q">tights</str>
				</lst>
			</arr>
		</listener>

		<!--
			Use Cold Searcher:
			If a search request comes in and there is no current
			registered searcher, then immediately register the still
			warming searcher and use it.  If "false" then all requests
			will block until the first searcher is done warming.
		-->
		<useColdSearcher>false</useColdSearcher>

		<!--
			Max Warming Searchers:
			Maximum number of searchers that may be warming in the
			background concurrently.  An error is returned if this limit
			is exceeded.

			Recommend values of 1-2 for read-only slaves, higher for
			masters w/o cache warming.
		-->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>


	<!--
	Request Dispatcher

		This section contains instructions for how the SolrDispatchFilter
		should behave when processing requests for this SolrCore.

		handleSelect is a legacy option that affects the behavior of requests
		such as /select?qt=XXX

		handleSelect="true" will cause the SolrDispatchFilter to process
		the request and dispatch the query to a handler specified by the 
		"qt" param, assuming "/select" isn't already registered.

		handleSelect="false" will cause the SolrDispatchFilter to
		ignore "/select" requests, resulting in a 404 unless a handler
		is explicitly registered with the name "/select"

		handleSelect="true" is not recommended for new users, but is the default
		for backwards compatibility
	-->
	<requestDispatcher handleSelect="false">
		<!-- 
			Request Parsing
			These settings indicate how Solr Requests may be parsed, and
			what restrictions may be placed on the ContentStreams from
			those requests

			enableRemoteStreaming - enables use of the stream.file
			and stream.url parameters for specifying remote streams.

			multipartUploadLimitInKB - specifies the max size (in KiB) of
			Multipart File Uploads that Solr will allow in a Request.

			formdataUploadLimitInKB - specifies the max size (in KiB) of
			form data (application/x-www-form-urlencoded) sent via
			POST. You can use POST to pass request parameters not
			fitting into the URL.

			*** WARNING ***
			The settings below authorize Solr to fetch remote files, You
			should make sure your system has some authentication before
			using enableRemoteStreaming="true"
		-->
		<requestParsers enableRemoteStreaming="true"
			multipartUploadLimitInKB="2048000"
			formdataUploadLimitInKB="2048"/>

		<!--
			HTTP Caching:
			Set HTTP caching related parameters (for proxy caches and clients).

			The options below instruct Solr not to output any HTTP Caching
			related headers
		-->
		<httpCaching never304="true" />
	</requestDispatcher>

	<!--
		The spell check component can return a list of alternative spelling
		suggestions. http://wiki.apache.org/solr/SpellCheckComponent
	-->
	<searchComponent name="spellcheck" class="solr.SpellCheckComponent">

		<str name="queryAnalyzerFieldType">textSpell</str>

		<!-- Multiple "Spell Checkers" can be declared and used by this component-->

		<!-- a spellchecker built from a field of the main index -->
		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="field">name</str>
			<str name="classname">solr.DirectSolrSpellChecker</str>
			<!-- the spellcheck distance measure used, the default is the internal levenshtein -->
			<str name="distanceMeasure">internal</str>
			<!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
			<float name="accuracy">0.5</float>
			<!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
			<int name="maxEdits">2</int>
			<!-- the minimum shared prefix when enumerating terms -->
			<int name="minPrefix">1</int>
			<!-- maximum number of inspections per result. -->
			<int name="maxInspections">5</int>
			<!-- minimum length of a query term to be considered for correction -->
			<int name="minQueryLength">4</int>
			<!-- maximum threshold of documents a query term can appear to be considered for correction -->
			<float name="maxQueryFrequency">0.01</float>
			<!-- uncomment this to require suggestions to occur in 1% of the documents
			<float name="thresholdTokenFrequency">.01</float>
			-->
		</lst>

		<!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
		<lst name="spellchecker">
			<str name="name">wordbreak</str>
			<str name="classname">solr.WordBreakSolrSpellChecker</str>
			<str name="field">name</str>
			<str name="combineWords">true</str>
			<str name="breakWords">true</str>
			<int name="maxChanges">10</int>
		</lst>

	</searchComponent>

	<!-- 
		Auto Complete: http://wiki.apache.org/solr/Suggester
		This is a spell check component configured to work
		well with an autocomplete request handler.
	-->
	<searchComponent name="suggest" class="solr.SpellCheckComponent">
		<lst name="spellchecker">
			<str name="name">suggest</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">ProductDescription</str>
			<float name="threshold">0.005</float>
			<str name="buildOnCommit">true</str>
		</lst>
	</searchComponent>

	<!-- 
		Terms Component http://wiki.apache.org/solr/TermsComponent

		A component to return terms and document frequency of those terms
	-->
	<searchComponent name="terms" class="solr.TermsComponent"/>

	<!-- 
		Query Elevation Component http://wiki.apache.org/solr/QueryElevationComponent

		a search component that enables you to configure the top
		results for a given query regardless of the normal lucene
		scoring.
	-->
	<searchComponent name="elevator" class="solr.QueryElevationComponent" >
		<!-- pick a fieldType to analyze queries -->
		<str name="queryFieldType">string</str>
		<str name="config-file">elevate.xml</str>
	</searchComponent>
	
	<!--
		Request Handlers: http://wiki.apache.org/solr/SolrRequestHandler

		Incoming queries will be dispatched to the correct handler
		based on the matching request path piece.

		If a Request Handler is declared with startup="lazy", then it will
		not be initialized until the first request that uses it.
	-->
	
	<!--
		SearchHandler: http://wiki.apache.org/solr/SearchHandler

		For processing Search Queries, the primary Request Handler
		provided with Solr is "SearchHandler" It delegates to a sequent
		of SearchComponents (see below) and supports distributed
		queries across multiple shards
	-->
	<requestHandler name="/select" class="solr.SearchHandler">
		<!-- 
			Default values for query parameters can be specified, these
			will be overridden by parameters in the request.
		-->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
			<str name="df">text</str>
			<str name="qf">ProductNumber Name^20 ProductDescription^10 Color CategoryName^5 SubcategoryName^50</str>
			<str name="defType">dismax</str>
			<str name="q.alt">*:*</str>
			<str name="fl">*,score</str>
			<str name="spellcheck.onlyMorePopular">false</str>
			<str name="spellcheck.extendedResults">false</str>
			<str name="spellcheck.count">1</str>
			<arr name="last-components">
				<str>elevator</str>
				<str>spellcheck</str>
			</arr>
		</lst>
	</requestHandler>

	<!-- Field Analysis Request Handler

		RequestHandler that provides much the same functionality as
		analysis.jsp. Provides the ability to specify multiple field
		types and field names in the same request and outputs
		index-time and query-time analysis for each of them.

		Request parameters are:
		analysis.fieldname - field name whose analyzers are to be used

		analysis.fieldtype - field type whose analyzers are to be used
		analysis.fieldvalue - text for index-time analysis
		q (or analysis.q) - text for query time analysis
		analysis.showmatch (true|false) - When set to true and when
		query analysis is performed, the produced tokens of the
		field value analysis will be marked as "matched" for every
		token that is produces by the query analysis
	-->
	<requestHandler name="/analysis/field"
		startup="lazy"
		class="solr.FieldAnalysisRequestHandler" />

	<!-- Admin Handlers

		Admin Handlers - This will register all the standard admin
		RequestHandlers.
	-->
	<requestHandler name="/admin/" class="solr.admin.AdminHandlers" />

	<!-- ping/healthcheck -->
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
		</lst>
		<!-- An optional feature of the PingRequestHandler is to configure the 
		handler with a "healthcheckFile" which can be used to enable/disable 
		the PingRequestHandler.
		relative paths are resolved against the data dir 
		-->
		<!-- <str name="healthcheckFile">server-enabled.txt</str> -->
	</requestHandler>

	<!-- A request handler for data import -->
	<requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
		<lst name="defaults">
			<str name="config">solr/adventureWorksProductsCollection/conf/data-config.xml</str>
		</lst>
	</requestHandler>

	<!-- Update Request Handler: http://wiki.apache.org/solr/UpdateXmlMessages -->
	<requestHandler name="/update" class="solr.UpdateRequestHandler"/>

	<!-- Legacy config for the admin interface -->
	<admin>
		<defaultQuery>bike</defaultQuery>
	</admin>

</config>
